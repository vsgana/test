name: Deploy EC2 with Terraform

on:
  push:
    branches: [main]
    tags:
      - deploy-dev
      - deploy-prod
  workflow_dispatch:
    inputs:
      stage:
        description: "dev or prod"
        required: true
        default: "dev"

jobs:
  deploy:
    runs-on: ubuntu-latest

    outputs:
      writer_ip: ${{ steps.get_ips.outputs.writer_ip }}
      reader_ip: ${{ steps.get_ips.outputs.reader_ip }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üè∑ Set STAGE variable
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "STAGE=${{ github.event.inputs.stage }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/tags/deploy-prod" ]]; then
            echo "STAGE=prod" >> $GITHUB_ENV
          else
            echo "STAGE=dev" >> $GITHUB_ENV
          fi

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: ‚öôÔ∏è Terraform Init
        run: terraform init

      - name: üöÄ Terraform Apply
        run: terraform apply -auto-approve -var-file="${STAGE}.tfvars"

      - name: üì§ Get Terraform Outputs (Public IPs)
        id: get_ips
        run: |
          writer_ip=$(terraform output -raw writer_public_ip 2>/dev/null| grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)
          reader_ip=$(terraform output -raw reader_public_ip 2>/dev/null| grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)

          echo "writer_ip=$writer_ip" >> $GITHUB_OUTPUT
          echo "reader_ip=$reader_ip" >> $GITHUB_OUTPUT

          echo "Writer IP: $writer_ip"
          echo "Reader IP: $reader_ip"

  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: üîç Health Check - Writer EC2 (Port 80)
        run: |
          WRITER_IP=${{ needs.deploy.outputs.writer_ip }}
          echo "Checking if port 80 is reachable on $WRITER_IP..."

          for i in {1..10}; do
            STATUS=$(curl -s --max-time 5 -o /dev/null -w "%{http_code}" http://$WRITER_IP)
            if [ "$STATUS" -eq 200 ]; then
              echo "‚úÖ App is healthy and reachable (HTTP 200)"
              exit 0
            else
              echo "‚è≥ Attempt $i: Not ready yet (status: $STATUS). Retrying in 5s..."
              sleep 5
            fi
          done

          echo "‚ùå App is not reachable on port 80 after multiple attempts"
          exit 1
